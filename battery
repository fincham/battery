#!/usr/bin/python

"""
Interrogate upowerd over dbus to see what's up with the synthesised composite battery device (DisplayDevice). No promises.
On e.g. Lenovo laptops with multiple batteries this produces a nice one line summary of the status of both batteries as an aggregate.

Michael Fincham <michael@hotplate.co.nz> 2017-01-16
"""

import dbus

class DisplayDevice(object):
    # from <https://upower.freedesktop.org/docs/Device.html#Device:State> 2017-01-16
    battery_states = (
        'Unknown',
        'Charging',
        'Discharging',
        'Empty',
        'Fully charged',
        'Pending charge',
        'Pending discharge'
    )

    def __init__(self):
        self.bus = dbus.SystemBus()
        self.display_device = self.bus.get_object('org.freedesktop.UPower', '/org/freedesktop/UPower/devices/DisplayDevice')
        
    def get_property(self, property_name):
        """
        Retrieve a dbus property for the DisplayDevice.
        
        Some interesting properties for a battery:
        # Percentage
        # TimeToFull
        # TimeToEmpty
        # State
        """
        return self.display_device.Get('org.freedesktop.UPower', property_name, dbus_interface=dbus.PROPERTIES_IFACE)
 
    def get_state(self):
        """
        Provide an english text string describing the state of the battery.
        """
        return self.battery_states[self.get_property('state')]

    def get_time(self):
        """
        The number of seconds until the battery is either charged or discharged, depending on what is currently happening.
        """
        state = self.get_state()
        if state == 'Discharging':
            return device.get_property('TimeToEmpty')
        elif state == 'Charging':
            return device.get_property('TimeToFull')

if __name__ == '__main__':
    device = DisplayDevice()
    state = device.get_state()
    percentage = int(round(device.get_property('Percentage')))

    seconds = device.get_time()
    if seconds:
        minutes = divmod(seconds, 60)[0]
        hours, minutes = divmod(minutes, 60)
        time = " %i:%i" % (hours, minutes)
    else:
        time = ''

    print("%s %s%%%s" % (state, percentage, time))

